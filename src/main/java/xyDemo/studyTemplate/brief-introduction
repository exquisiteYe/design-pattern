1 定义
    模板模式（Template Method Design Pattern）主要是用来解决复用和扩展两个问题。
    模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。
    这里的“算法”，可以理解为广义上的“业务逻辑”，并不特指数据结构和算法中的“算法”。这里的算法骨架就是“模板”，包含算法骨架的方法就是“模板方法”。
2 实现
    在模板模式经典的实现中，模板方法定义为 final，可以避免被子类重写。需要子类重写的方法定义为 abstract，可以强迫子类去实现。
3 作用&场景
    3.1 复用
        复用指的是，所有的子类可以复用父类中提供的模板方法的代码。
        3.1.1 Java InputStream
            Java IO 类库中，有很多类的设计用到了模板模式，比如 InputStream、OutputStream、Reader、Writer。
            以 InputStream 为例。在代码中，read() 函数是一个模板方法，定义了读取数据的整个流程，并且暴露了一个可以由子类来定制的抽象方法。不过这个方法也被命名为了 read()，只是参数跟模板方法不同。
        3.1.2 Java AbstractList
            在 Java AbstractList 类中，addAll() 函数可以看作模板方法，调用了add()方法。
            add() 是子类需要重写的方法，尽管没有声明为 abstract 的，但函数实现直接抛出了 UnsupportedOperationException 异常，保证了子类不重写则不能使用的