1 定义
    观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern），指多个对象间存在一对多的依赖关系，
    当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。它是对象行为型模式。
    优点
        降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。符合依赖倒置原则。
        目标与观察者之间建立了一套触发机制。
    缺点
        目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。
        当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。

3 应用场景
    3.1 适用情形
        观察者模式的应用场景非常广泛
            比如，邮件订阅、RSS Feeds，本质上都是观察者模式。
        观察者模式，它将观察者和被观察者代码解耦。
            在软件系统中，当系统一方行为依赖另一方行为的变动时，可使用观察者模式松耦合联动双方，使得一方的变动可以通知到感兴趣的另一方对象，从而让另一方对象对此做出响应
            通过前面的分析与应用实例可知观察者模式适合以下几种情形。
            对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。
            当一个抽象模型有两个方面，其中一个方面依赖于另一方面时，可将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。
            实现类似广播机制的功能，不需要知道具体收听者，只需分发广播，系统中感兴趣的对象会自动接收该广播。（最简单的，kafka）
            多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知。（？目前不是很理解）
    3.2 不同场景的实现方式
        不同的应用场景和需求下，这个模式也有截然不同的实现方式：
        有同步阻塞的实现方式，也有异步非阻塞的实现方式；
