1 定义
    Builder 模式，中文翻译为建造者模式或者构建者模式，也有人叫它生成器模式。

2 问题
    2.1 直接使用构造函数或者配合 set 方法就能创建对象，为什么还需要建造者模式来创建呢？
    2.2 建造者模式和工厂模式都可以创建对象，那它们两个的区别在哪里呢？

3 使用场景
    多个简单对象构造成一个复杂对象
    在平时的开发中，创建一个对象最常用的方式是，使用 new 关键字调用类的构造函数来完成。但是如果存在下面情况中的任意一种，就要考虑使用建造者模式了。
    3.1 合法校验（Preconditions）
        类的构造函数必填属性很多。
            把类的必填属性放到构造函数中，强制创建对象的时候就设置。如果必填的属性有很多，把这些必填属性都放到构造函数中设置，那构造函数就又会出现参数列表很长的问题。
            如果把必填属性通过 set() 方法设置，那校验这些必填属性是否已经填写的逻辑就无处安放了。
    3.2 依赖关系（Dependencies）
        类的属性之间有一定的依赖关系或者约束条件。
            如果继续使用构造函数配合 set() 方法的设计思路，那这些依赖关系或约束条件的校验逻辑就无处安放了。
    3.3 不可变（Immutable）
        需要希望创建不可变对象。
        对象在创建好之后，就不能再修改内部的属性值，要实现这个功能，我们就不能在类中暴露 set() 方法。构造函数配合 set() 方法来设置属性值的方式就不适用了。

5 建造者模式与工厂模式的区别
    工厂模式是用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。
    建造者模式是用来创建一种类型的复杂对象，通过设置不同的可选参数，“定制化”地创建不同的对象。
    网上有一个经典的例子很好地解释了两者的区别。
        顾客走进一家餐馆点餐，我们利用工厂模式，根据用户不同的选择，来制作不同的食物，比如披萨、汉堡、沙拉。
        对于披萨来说，用户又有各种配料可以定制，比如奶酪、西红柿、起司，我们通过建造者模式根据用户选择的不同配料来制作披萨。